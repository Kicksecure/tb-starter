#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

#set -x
#exec 1>/tmp/torbrowser.log
#exec 2>/tmp/torbrowser.log

set -o pipefail
set -o errtrace

[ -n "$SCRIPTNAME" ] || SCRIPTNAME="$(basename "$BASH_SOURCE")"

IDENTIFIER="torbrowser"

ICON="/usr/share/icons/anon-icon-pack/tbupdate.ico"

tb_error_handler() {
   local exit_code="$?"

   local MSG="\
###########################################################
## $SCRIPTNAME script bug.
## No panic. Nothing is broken. Just some rare condition
## has been hit. Try again later. There is likely a
## solution for this problem. Please see the Whonix News,
## Whonix User Help Forum and Whonix Documentation.
## https://www.whonix.org/wiki/$tb_wiki
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
## exit_code: $exit_code
##
## output: $output
## output_opts: ${output_opts[@]}
## progressbaridx: $progressbaridx
##
## Experts only:
## bash -x $SCRIPTNAME
###########################################################\
"

   ## XXX
   #mkdir --parents "$tb_cache_folder"
   #echo "$MSG" >> "$tb_cache_folder/torbrowser_updater_error.log"

   if [ "$progressbaridx" = "" ]; then
      true
   else
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   fi
   $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
   $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
   exit 1
}

trap "tb_error_handler" ERR

tb_set_links() {
   DOC_LINK="https://www.whonix.org/wiki/Documentation"
   CONTRIBUTE_LINK="https://www.whonix.org/wiki/Contribute"
   DONATE_LINK="https://www.whonix.org/wiki/Donate"
   FORUM_LINK="https://forums.whonix.org"
   MAILINGLIST_LINK="https://www.whonix.org/pipermail/whonix-devel/"
   IMPORTANTBLOG_LINK="https://www.whonix.org/blog/category/important"
   FEATUREBLOG_LINK="https://www.whonix.org/blog/"

   if [ ! "$TB_CUSTOM_HOMEPAGE" = "" ]; then
      ## Prefer the custom homepage a user might have defined over
      ## everything else.
      DEFAULT_LINK="$TB_CUSTOM_HOMEPAGE"
   elif [ -f "/usr/share/anon-ws-base-files/workstation" ]; then
      ## Running inside a Whonix-Workstation.
      local whonix_homepage
      whonix_homepage="/usr/share/homepage/whonix-welcome-page/whonix.html"
      if [ -f "$whonix_homepage" ]; then
         ## Great, we have whonix-welcome-page installed, prefer that one.
         DEFAULT_LINK="file://$whonix_homepage"
         open_link_confirmation_maybe_skip=true
      else
         ## whonix-welcome-page not installed, fall back to about:blank,
         ## because about:tor does not apply to Whonix (makes users confuse
         ## The Tor Project with Whonix).
         DEFAULT_LINK="about:blank"
         open_link_confirmation_maybe_skip=true
      fi
   elif [ -f "/usr/share/anon-gw-base-files/gateway" ]; then
      ## about:tor also does not apply here.
      DEFAULT_LINK="about:blank"
      open_link_confirmation_maybe_skip=true
   else
      ## Running outside of Whonix.
      true "Not modifying which link to open."
   fi
}

root_check() {
   if [ "$(id -u)" != "0" ]; then
      #echo "$SCRIPTNAME running as user."
      true
   else
      echo "Do not run $SCRIPTNAME as root!"
      exit 1
   fi
}

tb_preparation() {
   who_ami="$(whoami)"
   if command -v qubesdb-read >/dev/null 2>&1 ; then
      [ -n "$is_qubes" ] || is_qubes=true
      ## qubesdb-read fails inside chroot, therefore overwriting with '|| true'.
      [ -n "$qubes_vm_name" ] || qubes_vm_name="$(qubesdb-read /name)" || true
      [ -n "$qubes_vm_type" ] || qubes_vm_type="$(qubesdb-read /qubes-vm-type)" || true
   else
      [ -n "$is_qubes" ] || is_qubes=false
   fi

   if [ "$qubes_vm_type" = "TemplateVM" ]; then
      if [ "$tb_user_home" = "" ]; then
         tb_user_home="/var/cache/tb-binary"
      fi
   fi

   [ -n "$tb_user_home" ] || tb_user_home=~
   ## When double clicking a file downloaded in Tor Browser download tab
   ## '~' would be set to '/home/user/.tb/tor-browser/Browser' which would lead
   ## to a false-positive "Tor Browser not installed" message.
   if echo "$tb_user_home" | grep -q tor-browser ; then
      tb_user_home="/home/$who_ami"
   fi

   [ -n "$tb_install_folder" ] || tb_install_folder="tb"
   [ -n "$tb_install_folder_dot" ] || tb_install_folder_dot=".tb"
   [ -n "$tb_browser_name" ] || tb_browser_name="tor-browser"
   [ -n "$tb_settings_folder" ] || tb_settings_folder="torbrowser.d"
   [ -n "$tb_name" ] || tb_name="tor"
   [ -n "$tb_title" ] || tb_title="Tor Browser"
   [ -n "$tb_wiki" ] || tb_wiki="Tor_Browser"
   [ -n "$tb_proxy_name" ] || tb_proxy_name="tor"
   [ -n "$tb_bin" ] || tb_bin="torbrowser"
   [ -n "$tb_browser_runner" ] || tb_browser_runner="start-tor-browser"
   [ -n "$IDENTIFIER" ] || IDENTIFIER="$tb_bin"

   [ -n "$tb_home_folder" ] || tb_home_folder="$tb_user_home/$tb_install_folder_dot"
   [ -n "$tb_browser_folder" ] || tb_browser_folder="$tb_home_folder/$tb_browser_name"

   if [ "$display" = "" ]; then
      if [ "$DISPLAY" = "" ]; then
         display=":0"
      else
         display="$DISPLAY"
      fi
   fi

   output="/usr/lib/msgcollector/msgcollector"

   local my_tty
   local my_tty_exit_code
   my_tty_exit_code="0"
   my_tty="$(tty)" || { my_tty_exit_code="$?" ; true; };

   if [ ! "$my_tty_exit_code" = "0" ]; then
      my_tty="none"
   fi

   ## Just in case.
   if [ "$my_tty" = "" ]; then
      my_tty="none"
   fi

   who_ami="$(whoami)"

   output_opt_1="--icon $ICON"
   output_opt_2="--parentpid $$"
   output_opt_3="--identifier ${IDENTIFIER}"
   output_opt_4="--parenttty $my_tty"
   output_opt_5="--whoami $who_ami"

   output_opts=( "$output_opt_1" "$output_opt_2" "$output_opt_3" "$output_opt_4" "$output_opt_5")

   TITLE="$tb_title Starter (by Whonix developers)"

   ## TODO
   #$output ${output_opts[@]} --forget
}

tb_config_folder_parser() {
   [ -n "$tb_settings_folder" ] || tb_settings_folder="torbrowser.d"
   shopt -s nullglob
   local i
   for i in /etc/$tb_settings_folder/*.conf /rw/config/$tb_settings_folder/*.conf; do
      bash -n "$i"
      source "$i"
   done
}

tb_templatevm_check() {
   if [ "$is_qubes" = "false" ]; then
      true "Not running in Qubes."
      return 0
   fi

   if [ ! "$qubes_vm_type" = "TemplateVM" ]; then
      true "Not running in TemplateVM."
      return 0
   fi

   if [ "$tb_allow_start_in_templatevm" = "true" ]; then
      true "tb_allow_start_in_templatevm is true."
      return 0
   fi

   if [ "$have_other_args" = "false" ]; then
      tb_qubes_wiki=Running_"$tb_wiki"_in_Qubes_TemplateVM
      local MSG="<p>Do not run $tb_title in TemplateVM.<br></br>
   <br></br>
   More info: <a href=https://www.whonix.org/wiki/$tb_wiki#$tb_qubes_wiki>https://www.whonix.org/wiki/$tb_wiki#$tb_qubes_wiki</a></p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done

      exit 3
   fi
}

tb_qubes_dvm_template() {
   if echo "$qubes_vm_name" | grep -q --invert-match "\-dvm" ; then
      true "INFO: not running inside Qubes DVM Template, ok."
      return 0
   fi

   local MSG="\
<p>Do not run Tor Browser in Qubes DVM Template!<br></br>
<br></br>
More info: <a href=https://www.whonix.org/wiki/Tor_Browser#Running_Tor_Browser_in_Qubes_DVM_Template>https://www.whonix.org/wiki/Tor_Browser#Running_Tor_Browser_in_Qubes_DVM_Template</a></p>"

   $output ${output_opts[@]} --messagex --titlex "$TITLE" --typex "error" --message "$MSG" --done
   $output ${output_opts[@]} --messagecli --titlecli "$TITLE" --typecli "error" --message "$MSG" --done
   exit 1
}

parse_cmd_options() {
   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   while :
   do
       case $1 in
           --doc)
               LINK="$DOC_LINK"
               shift
               ;;
           --contribute)
               LINK="$CONTRIBUTE_LINK"
               shift
               ;;
           --donate)
               LINK="$DONATE_LINK"
               shift
               ;;
           --forum)
               LINK="$FORUM_LINK"
               shift
               ;;
           --mailinglist)
               LINK="$MAILINGLIST_LINK"
               shift
               ;;
           --importantblog)
               LINK="$IMPORTANTBLOG_LINK"
               shift
               ;;
           --featureblog)
               LINK="$FEATUREBLOG_LINK"
               shift
               ;;
           --)
               shift
               break
               ;;
           *)
               break
               ;;
       esac
   done

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.

   local other_args
   other_args="$@"
   if [ "$other_args" = "" ]; then
      have_other_args="false"
      if [ "$LINK" = "" ]; then
         LINK="$DEFAULT_LINK"
         if [ "$open_link_confirmation_maybe_skip" = "true" ]; then
            open_link_confirmation_skip="true"
         fi
      fi
   else
      have_other_args="true"
   fi
}

tb_detect_starter_bin() {
   if [ ! "$tb_starter_bin" = "" ]; then
      return 0
   fi

   if [ -x "$tb_browser_folder/Browser/$tb_browser_runner" ]; then
      ## Preferring $tb_browser_folder/Browser/$tb_browser_runner to work around
      ## The Tor Project upstream issue:
      ## 'start-tor-browser.desktop parameter passing broken on spaces'
      ## https://trac.torproject.org/projects/tor/ticket/18022
      tb_starter_bin="$tb_browser_folder/Browser/$tb_browser_runner"
   elif [ -x "$tb_browser_folder/$tb_browser_runner" ]; then
      tb_starter_bin="$tb_browser_folder/$tb_browser_runner"
   elif [ -x "$tb_browser_folder/$tb_browser_runner.desktop" ]; then
      tb_starter_bin="$tb_browser_folder/$tb_browser_runner.desktop"
   else
      local MSG="Neither <code>$tb_browser_folder/Browser/$tb_browser_runner</code> nor\
<code>$tb_browser_folder/$tb_browser_runner</code> nor \
<code>$tb_browser_folder/$tb_browser_runner.desktop</code> is executable."
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 2
   fi
}

tb_start_tor_browser() {
   local tb_exit_code="0"
   $tb_starter_bin_pre $tb_starter_bin --allow-remote $tb_starter_bin_post "$@" || { tb_exit_code="$?" ; true; };

   if [ ! "$tb_exit_code" = "0" ]; then
      local MSG="<p>Failed to start $tb_title!<br></br>
<br></br>
Failed to run:<br></br>
<br></br><code>$tb_starter_bin --allow-remote \"$@\"</code>.
<br></br>
<br></br>Exited with code: <code>$tb_exit_code</code>
<br></br>
<br></br>To see this for yourself, you could try: <blockquote>Start Menu -> Applications -> System -> Terminal
<br></br>Then run:
<br></br><code>$SCRIPTNAME</code></blockquote></p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit "$tb_exit_code"
   fi
}

maybe_use_open_link_confirmation() {
   ## Environment variable OPEN_LINK_CONFIRMATION might be set to 'true' if
   ## we are run by open_link_confirmation.

   if [ "$OPEN_LINK_CONFIRMATION" = "true" ]; then
      ## We are run by open_link_confirmation. Not run open_link_confirmation
      ## again. Open Tor Browser.
      tool=tb_start_tor_browser
   else
      tool=tb_start_tor_browser

      ## maybe use open link confirmation
      if [ -x /usr/lib/open_link_confirmation ]; then
         if [ ! "$open_link_confirmation_skip" = "true" ]; then
            tool="/usr/lib/open_link_confirmation $tb_using_i2p"
         fi
      fi
   fi

   local temp
   local tool_exit_code="0"
   if [ "$LINK" = "" ]; then
      temp="$tool $@"
      $tool "$@" || { tool_exit_code="$?" ; true; };
   else
      temp="$tool $@"
      $tool "$LINK" || { tool_exit_code="$?" ; true; };
   fi

   if [ ! "$tool_exit_code" = "0" ]; then
      local MSG="<p>$tb_title maybe_use_open_link_confirmation error.
<br></br>
<br></br>Failed:
<br></br><code>$temp</code></p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi
}

tb_folder_change_directory() {
   local change_directory_exit_code="0"
   cd "$tb_browser_folder" || { change_directory_exit_code="$?" ; true; };

   if [ ! "$change_directory_exit_code" = "0" ]; then
      local MSG="<p>$tb_title permission issues?<br></br>
Failed to <code>cd \"$tb_browser_folder\"</code>.<br></br>
To fix this, you could try: <blockquote>Start Menu -> Applications -> System -> Terminal<br></br>
<code>sudo chown --recursive \"$who_ami\":\"$who_ami\" \"$tb_browser_folder\"</code></blockquote></p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi
}

maybe_install_tor_browser() {
   if [ -d "$tb_browser_folder" ]; then
      return 0
   fi

   local MSG="<p>$tb_title is currently not installed.
<br></br>(Folder $tb_browser_folder does not exist.)</p>"
   local question="Start $tb_title Downloader (by Whonix Developers)?"
   local button="yesno"
   local answer
   answer="$(/usr/lib/msgcollector/generic_gui_message "error" "$TITLE" "$MSG" "$question" "$button")"
   #answer="0"
   #zenity --title="$TITLE" --question --text "$MSG" || { answer="$?" ; true; };
   ## zenity exit codes
   ## no 1
   ## yes 0
   if [ "$answer" = "16384" ]; then ## button 'yes' pressed
      local update_torbrowser_command_v_exit_code="0"
      command -v update-torbrowser >/dev/null 2>/dev/null || { update_torbrowser_command_v_exit_code="$?" ; true; };
      if [ "$update_torbrowser_command_v_exit_code" = "0" ]; then
         ## update-torbrowser is available.
         ## || true, in case update-torbrowser fails for some reason (no
         ## internet connection).
         update-torbrowser $tb_using_i2p --noaskstart || true
      else
         ## update-torbrowser is not available.
         MSG="<p>$tb_title Updater (by Whonix developers) is not installed.
update-torbrowser $tb_using_i2p is not available. Please install the tb-updater package.
<br></br>Run:
<blockquote>sudo apt-get install tb-updater</blockquote>
Then try again.</p>"
         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      fi
   else  ## button 'yes' not pressed
      exit 0
   fi

   if [ ! -d "$tb_browser_folder" ]; then
      ## Still not installed.
      exit 0
   fi
}

main_function() {
   root_check "$@"
   tb_preparation "$@"
   tb_set_links "$@"
   tb_config_folder_parser "$@"
   parse_cmd_options "$@"
   tb_templatevm_check "$@"
   tb_qubes_dvm_template "$@"
   maybe_install_tor_browser "$@"
   tb_folder_change_directory "$@"
   tb_detect_starter_bin "$@"
   maybe_use_open_link_confirmation "$@"
}

main_function "$@"
