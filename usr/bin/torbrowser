#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -o pipefail
set -o errtrace

SCRIPTNAME="$(basename "$BASH_SOURCE")"

IDENTIFIER="torbrowser"

ICON="/usr/share/icons/anon-icon-pack/tbupdate.ico"

tb_error_handler() {
   local exit_code="$?"

   local MSG="\
###########################################################
## $SCRIPTNAME script bug.
## No panic. Nothing is broken. Just some rare condition
## has been hit. Try again later. There is likely a
## solution for this problem. Please see the Whonix News,
## Whonix User Help Forum and Whonix Documentation.
## https://www.whonix.org/wiki/Tor_Browser
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
## exit_code: $exit_code
##
## output: $output
## output_opts: ${output_opts[@]}
## progressbaridx: $progressbaridx
##
## Experts only:
## bash -x $SCRIPTNAME
###########################################################\
"

   mkdir --parents ~/".tb"
   echo "$MSG" >> ~/".tb/torbrowser_updater_error.log"

   if [ "$progressbaridx" = "" ]; then
      true
   else
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   fi
   $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
   $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
   exit 1
}

trap "tb_error_handler" ERR

DOC_LINK="https://www.whonix.org/wiki/Documentation"
CONTRIBUTE_LINK="https://www.whonix.org/wiki/Contribute"
DONATE_LINK="https://www.whonix.org/wiki/Donate"
FORUM_LINK="https://www.whonix.org/forum/"
MAILINGLIST_LINK="https://www.whonix.org/pipermail/whonix-devel/"
IMPORTANTBLOG_LINK="https://www.whonix.org/blog/category/important"
FEATUREBLOG_LINK="https://www.whonix.org/blog/"

root_check() {
   if [ "$(id -u)" != "0" ]; then
      #echo "$SCRIPTNAME running as user."
      true
   else
      echo "Do not run $SCRIPTNAME as root!"
      exit 1
   fi
}

tb_preparation() {
   ## Workaround for CI compatibility.
   if [ "$CI" = "true" ]; then
      [ -n "$tb_home_folder" ] || tb_home_folder=/home/user
   else
      [ -n "$tb_home_folder" ] || tb_home_folder=~
   fi

   #echo "INFO: TB_LANG: $TB_LANG"

   for i in /etc/torbrowser.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         bash -n "$i"
         source "$i"
      fi
   done

   ## Check if TB_LANG exists and is not empty.
   if [[ "$TB_LANG" && "${TB_LANG}" ]]; then
      echo "INFO: Tor Browser language variable is set to $TB_LANG."
      true
   else
      echo "INFO: Tor Browser language variable not found. Setting TB_LANG to the default en-US."
      TB_LANG="en-US"
   fi

   [ -n "$tb_browser_folder" ] || tb_browser_folder="$tb_home_folder/tor-browser_$TB_LANG"

   if [ "$display" = "" ]; then
      if [ "$DISPLAY" = "" ]; then
         display=":0"
      else
         display="$DISPLAY"
      fi
   fi

   output="/usr/lib/msgcollector/msgcollector"

   local my_tty
   local my_tty_exit_code
   my_tty_exit_code="0"
   my_tty="$(tty)" || { my_tty_exit_code="$?" ; true; };

   if [ ! "$my_tty_exit_code" = "0" ]; then
      my_tty="none"
   fi

   ## Just in case.
   if [ "$my_tty" = "" ]; then
      my_tty="none"
   fi

   who_ami="$(whoami)"

   output_opt_1="--icon $ICON"
   output_opt_2="--parentpid $$"
   output_opt_3="--identifier ${IDENTIFIER}"
   output_opt_4="--parenttty $my_tty"
   output_opt_5="--whoami $who_ami"

   output_opts=( "$output_opt_1" "$output_opt_2" "$output_opt_3" "$output_opt_4" "$output_opt_5")

   TITLE="Tor Browser Starter (by Whonix developers)"

   ## TODO
   #$output ${output_opts[@]} --forget
}

parse_cmd_options() {
   if [ "$1" = "" ]; then
      ## Same as --start.
      open_new_window="0"
      LINK=""
      return 0
   fi

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   while :
   do
       case $1 in
           --language)
               TB_LANG="$2"
               shift 2
               ;;
           --start)
               open_new_window="0"
               LINK=""
               shift
               ;;
           --doc)
               LINK="$DOC_LINK"
               shift
               ;;
           --contribute)
               LINK="$CONTRIBUTE_LINK"
               shift
               ;;
           --donate)
               LINK="$DONATE_LINK"
               shift
               ;;
           --forum)
               LINK="$FORUM_LINK"
               shift
               ;;
           --mailinglist)
               LINK="$MAILINGLIST_LINK"
               shift
               ;;
           --importantblog)
               LINK="$IMPORTANTBLOG_LINK"
               shift
               ;;
           --featureblog)
               LINK="$FEATUREBLOG_LINK"
               shift
               ;;
           --new-window | --newwindow | -new-window | -newwindow)
               open_new_window="1"
               LINK="$2"
               if [ "$LINK" = "" ]; then
                  shift
               else
                  shift 2
               fi
               ;;
           --new-tab | --newtab | -new-tab | -newtab)
               open_new_window="0"
               LINK="$2"
               if [ "$LINK" = "" ]; then
                  shift
               else
                  shift 2
               fi
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "$SCRIPTNAME unknown option: $1"
               echo "See:"
               echo "    man $SCRIPTNAME"
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.
   other_args="$@"
   true "$BASH_SOURCE other_args: $other_args"
}

tb_start_new_tab() {
   new_window_or_new_tab="--new-tab"
   tb_start_shared
}

tb_new_window() {
   new_window_or_new_tab="--new-window"
   tb_start_shared
}

tb_start_shared() {
   if [ ! -d "$tb_browser_folder" ]; then
      MSG="<p><b>Tor Browser is not installed?</b>
<br></br>The folder $tb_browser_folder does not exist.</p>

<p>Please run: <blockquote>Start Menu -> Applications -> System -> Tor Browser Updater
            <br></br>or in Terminal: $SCRIPTNAME --update</blockquote></p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi

   echo "INFO: Starting Tor Browser..."

   if [ "$LINK" = "" ]; then
      if [ ! "$TB_CUSTOM_HOMEPAGE" = "" ]; then
         ## Prefer the custom homepage a user might have defined over
         ## everything else.
         LINK="$TB_CUSTOM_HOMEPAGE"
      elif [ -f "/usr/share/anon-ws-base-files/workstation" ]; then
         ## Running inside a Whonix-Workstation.
         local whonix_homepage
         whonix_homepage="/usr/share/homepage/whonix-welcome-page/whonix.html"
         if [ -f "$whonix_homepage" ]; then
            ## Great, we have whonix-welcome-page installed, prefer that one.
            LINK="file://$whonix_homepage"
         else
            ## whonix-welcome-page not installed, fall back to about:blank,
            ## because about:tor does not apply to Whonix (makes users confuse
            ## The Tor Project with Whonix).
            LINK="about:blank"
         fi
      elif [ -f "/usr/share/anon-gw-base-files/gateway" ]; then
         ## about:tor also does not apply here.
         LINK="about:blank"
      else
         ## Running outside of Whonix.
         true "Not modifying which link to open."
      fi
   fi

   if [ ! "$LINK" = "" ]; then
      tb_open_new_args="$new_window_or_new_tab $LINK"
      echo "INFO: Opening link..."
   fi

   local change_directory_exit_code="0"
   cd "$tb_browser_folder" || { change_directory_exit_code="$?" ; true; };

   if [ ! "$change_directory_exit_code" = "0" ]; then
      local MSG="<p>Tor Browser permission issues?<br></br>
Failed to <code>cd \"$tb_browser_folder\"</code>.<br></br>
To fix this, you could try: <blockquote>Start Menu -> Applications -> System -> Terminal<br></br>
<code>sudo chown --recursive \"$who_ami\":\"$who_ami\" \"$tb_browser_folder\"</code></blockquote></p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
      exit 1
   fi

   if [ -x "$tb_browser_folder/start-tor-browser" ]; then
      "$tb_browser_folder/start-tor-browser" --allow-remote $tb_open_new_args &
   elif [ -x "$tb_browser_folder/start-tor-browser.desktop" ]; then
      "$tb_browser_folder/start-tor-browser.desktop" --allow-remote $tb_open_new_args &
   else
      error "Neither $tb_browser_folder/start-tor-browser nor \
$tb_browser_folder/start-tor-browser.desktop is executable."
   fi
}

maybe_use_open_link_confirmation() {
   if [ ! "$OPEN_LINK_CONFIRMATION" = "true" ]; then
      if [ -x /usr/lib/open_link_confirmation ]; then
         if [ ! "$LINK" = "" ]; then
            /usr/lib/open_link_confirmation "$LINK"
         else
            /usr/lib/open_link_confirmation $other_args
         fi
         exit "$?"
      fi
      if [ ! "$LINK" = "" ]; then
         tb_start_new_tab
      else
         LINK="$1"
         tb_start_new_tab
      fi
   else
      if [ ! "$LINK" = "" ]; then
         tb_start_new_tab
      else
         LINK="$1"
         tb_start_new_tab
      fi
   fi
}

main_function() {
   root_check
   tb_preparation
   parse_cmd_options ${1+"$@"}

   if [ ! -d "$tb_browser_folder" ]; then
      local MSG="<p>Tor Browser is currently not installed.
<br></br>(Folder $tb_browser_folder does not exist.)</p>"
      local question="Start Tor Browser Updater (by Whonix Developers)?"
      local button="yesno"
      local answer
      answer="$(/usr/lib/msgcollector/generic_gui_message "error" "$TITLE" "$MSG" "$question" "$button")"
      #answer="0"
      #zenity --title="$TITLE" --question --text "$MSG" || { answer="$?" ; true; };
      ## zenity exit codes
      ## no 1
      ## yes 0
      if [ "$answer" = "16384" ]; then  # button 'yes' pressed
         local update_torbrowser_command_v_exit_code="0"
         command -v update-torbrowser >/dev/null 2>/dev/null || { update_torbrowser_command_v_exit_code="$?" ; true; };
         if [ "$update_torbrowser_command_v_exit_code" = "0" ]; then
            ## update-torbrowser is available.
            ## || true, in case update-torbrowser fails for some reason (no
            ## internet connection).
            update-torbrowser --noaskstart || true
         else
            ## update-torbrowser is not available.
            MSG='<p>Tor Browser Updater (by Whonix developers) is not installed.
update-torbrowser is not available. Please install the tb-updater package.
<br></br>Run:
<blockquote>sudo apt-get install tb-updater</blockquote>
Then try again.</p>'
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG" --done
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG" --done
         fi
      else
         exit 0
      fi
   fi
   if [ ! -d "$tb_browser_folder" ]; then
      ## Still not installed.
      exit 0
   fi

   if [ "$open_new_window" = "1" ]; then
      tb_new_window
   elif [ "$open_new_window" = "0" ]; then
      tb_start_new_tab
   elif [ ! "$LINK" = "" ]; then
      maybe_use_open_link_confirmation $other_args
   elif [ ! "$other_args" = "" ]; then
      true "$BASH_SOURCE other_args: $other_args"
      maybe_use_open_link_confirmation $other_args
   else
      true "$BASH_SOURCE Else!?!"
   fi
}

main_function ${1+"$@"}
